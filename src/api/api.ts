/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {number}
     * @memberof Todo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    description: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Todo
     */
    done: boolean;
}
/**
 * 
 * @export
 * @interface TodoCreateDTO
 */
export interface TodoCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof TodoCreateDTO
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof TodoCreateDTO
     */
    description?: string | null;
}
/**
 * 
 * @export
 * @interface TodoUpdateDTO
 */
export interface TodoUpdateDTO {
    /**
     * 
     * @type {boolean}
     * @memberof TodoUpdateDTO
     */
    done?: boolean | null;
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Todo resource.
         * @summary Removes the Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoItem: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTodoItem', 'id', id)
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Todo resources.
         * @summary Retrieves the collection of Todo resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoCollection: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Todo resource.
         * @summary Retrieves a Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItem: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTodoItem', 'id', id)
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Todo resource.
         * @summary Updates the Todo resource.
         * @param {string} id Resource identifier
         * @param {TodoUpdateDTO} todoUpdateDTO The updated Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTodoItem: async (id: string, todoUpdateDTO: TodoUpdateDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchTodoItem', 'id', id)
            // verify required parameter 'todoUpdateDTO' is not null or undefined
            assertParamExists('patchTodoItem', 'todoUpdateDTO', todoUpdateDTO)
            const localVarPath = `/api/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Todo resource.
         * @summary Creates a Todo resource.
         * @param {TodoCreateDTO} todoCreateDTO The new Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodoCollection: async (todoCreateDTO: TodoCreateDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'todoCreateDTO' is not null or undefined
            assertParamExists('postTodoCollection', 'todoCreateDTO', todoCreateDTO)
            const localVarPath = `/api/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Todo resource.
         * @summary Removes the Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodoItem(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodoItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Todo resources.
         * @summary Retrieves the collection of Todo resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoCollection(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Todo resource.
         * @summary Retrieves a Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoItem(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Todo resource.
         * @summary Updates the Todo resource.
         * @param {string} id Resource identifier
         * @param {TodoUpdateDTO} todoUpdateDTO The updated Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTodoItem(id: string, todoUpdateDTO: TodoUpdateDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTodoItem(id, todoUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Todo resource.
         * @summary Creates a Todo resource.
         * @param {TodoCreateDTO} todoCreateDTO The new Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTodoCollection(todoCreateDTO: TodoCreateDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTodoCollection(todoCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * Removes the Todo resource.
         * @summary Removes the Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodoItem(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Todo resources.
         * @summary Retrieves the collection of Todo resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoCollection(page?: number, options?: any): AxiosPromise<Array<Todo>> {
            return localVarFp.getTodoCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Todo resource.
         * @summary Retrieves a Todo resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItem(id: string, options?: any): AxiosPromise<Todo> {
            return localVarFp.getTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Todo resource.
         * @summary Updates the Todo resource.
         * @param {string} id Resource identifier
         * @param {TodoUpdateDTO} todoUpdateDTO The updated Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTodoItem(id: string, todoUpdateDTO: TodoUpdateDTO, options?: any): AxiosPromise<Todo> {
            return localVarFp.patchTodoItem(id, todoUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Todo resource.
         * @summary Creates a Todo resource.
         * @param {TodoCreateDTO} todoCreateDTO The new Todo resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodoCollection(todoCreateDTO: TodoCreateDTO, options?: any): AxiosPromise<Todo> {
            return localVarFp.postTodoCollection(todoCreateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * Removes the Todo resource.
     * @summary Removes the Todo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public deleteTodoItem(id: string, options?: any) {
        return TodoApiFp(this.configuration).deleteTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Todo resources.
     * @summary Retrieves the collection of Todo resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodoCollection(page?: number, options?: any) {
        return TodoApiFp(this.configuration).getTodoCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Todo resource.
     * @summary Retrieves a Todo resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodoItem(id: string, options?: any) {
        return TodoApiFp(this.configuration).getTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Todo resource.
     * @summary Updates the Todo resource.
     * @param {string} id Resource identifier
     * @param {TodoUpdateDTO} todoUpdateDTO The updated Todo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public patchTodoItem(id: string, todoUpdateDTO: TodoUpdateDTO, options?: any) {
        return TodoApiFp(this.configuration).patchTodoItem(id, todoUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Todo resource.
     * @summary Creates a Todo resource.
     * @param {TodoCreateDTO} todoCreateDTO The new Todo resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public postTodoCollection(todoCreateDTO: TodoCreateDTO, options?: any) {
        return TodoApiFp(this.configuration).postTodoCollection(todoCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


